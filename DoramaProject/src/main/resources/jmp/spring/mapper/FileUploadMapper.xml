<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jmp.spring.mapper.FileUploadMapper">


<insert id="addcontents">
insert into t_contents (cno,cname,story,cast,tags,genre,bc,agelimit,end,showdate) values(
SEQ_T_CONTENTS.nextval,#{cname},#{story},#{cast},#{tags},#{genre},#{bc},#{agelimit},#{end},#{showdate})
</insert>

<!-- 캐스트 관련 쿼리 -->
<insert id="addcast">
insert into t_cast(castno, castname,profileUploadPath,profileImgName) values(SEQ_T_CAST.nextval, #{castname},#{profileUploadPath},#{profileImgName})
</insert>

<insert id="addcast_match">
insert into cast_match(cno,cast,castno)  values(#{cno},#{cast},#{castno}) 
</insert>


<!--  cno(작품 번호)로 cast목록 가져오는 inner join 쿼리-->
<select id="getCastList" resultType="jmp.spring.vo.CastVo">
select m.*,c.*
from cast_match m  inner join t_cast c on m.castno=c.castno
 where m.cno = #{cno}
</select>


<select id="getcastByName" resultType="jmp.spring.vo.CastVo">
select * from  t_cast where castname= #{castname}
</select>
<!--               -->


<!-- 동영상 쿼리 -->
<insert id="addVideo">
insert into t_video(vno,vuploadpath,vfilename, regdate,story,cno) values(
SEQ_T_VIDEO.nextval,#{vuploadpath},#{vfilename},#{ regdate},#{story},#{cno})
</insert>

<select id="getAllVideo" resultType="jmp.spring.vo.VideoVo">
select * from t_video where cno= #{cno}
</select>

<select id="getAllVideoD" resultType="jmp.spring.vo.VideoVo">
select * from t_video where cno= #{cno} ORDER BY VNO DESC
</select>

<select id="getOneVideo" resultType="jmp.spring.vo.VideoVo">
select * from t_video where vno= #{vno}
</select>

<!-- 끝 -->

<select id="getList" resultType="jmp.spring.vo.ContentVo">
select attachNo, uuid, uploadPath, fileName, fileType, 
uploadPath || uuid ||'_' || fileName as savePath,
uploadPath ||'s_' || uuid ||'_' || fileName as s_savePath from tbl_attach
where attachno= #{attachno}
</select>

<select id="getTureAllList" resultType="jmp.spring.vo.ContentVo">
SELECT * FROM T_CONTENTS  ORDER BY CNO DESC
</select>

<!--컨텐츠 리스트페이지 기본 출력  -->
<select id="getAllList" resultType="jmp.spring.vo.ContentVo">
SELECT * FROM T_CONTENTS where notshow is null ORDER BY CNO DESC
</select>



<!--컨텐츠 리스트페이지 필터 출력  -->
<select id="getFilteredList" resultType="jmp.spring.vo.ContentVo">

<choose>
   <when test="type=='popular'">
    select *from
   (
		select  ROW_NUMBER() 

		over(order by rating desc) 
		
		row_num,c.* from t_contents c
	) WHERE notshow is null

    <if test="tagArray !=null">
    	and
	      <foreach collection="tagArray" item="tags" index="index" separator="or">
	         tags like '%' ||#{tags} ||'%'
	      </foreach>
	   </if>
	  <if test="genreArray !=null">
	    <if test="tagArray !=null">  or</if>
	     <if test="tagArray ==null">and </if>
	      <foreach collection="genreArray" item="genre" index="index" separator="or">
	         genre like '%' ||#{genre} ||'%'
	      </foreach>
	   </if>
   </when>
   <otherwise>
    SELECT * FROM T_CONTENTS where notshow is null

	   <if test="tagArray !=null">
	    and
	      <foreach collection="tagArray" item="tags" index="index" separator="or">
	         tags like '%' ||#{tags} ||'%'
	      </foreach>
	   </if>
	  <if test="genreArray !=null">
	    <if test="tagArray !=null">  or</if> 
	    <if test="tagArray ==null">and </if>
	      <foreach collection="genreArray" item="genre" index="index" separator="or">
	         genre like '%' ||#{genre} ||'%'
	      </foreach>
	   </if>
	    <if test="type =='recent'">
	       ORDER BY CNO DESC
	    </if>
	     <if test="type =='date'">
	       ORDER BY SHOWDATE DESC
	    </if>
	    <if test="type =='abc'">
	       ORDER BY CNAME
	    </if>
   </otherwise>
</choose>
</select>



<select id="getSeq" resultType="int">
select seq_attach.nextval from dual
</select>

<insert id="insert">
insert into tbl_attach values (#{attachno}, #{uuid}, #{uploadpath}, #{filename}, #{filetype}, sysdate)
</insert>

<update id="updatePoster">

update t_contents set puploadpath = #{puploadpath}, pfilename = #{pfilename} where cname = #{cname}
</update>
<update id="updatePoster2">

update t_contents set pfilename2 = #{pfilename} where cname = #{cname}
</update>


<delete id="delete">
delete tbl_attach where attachno= #{attachno} and uuid = #{uuid} 

</delete>

<select id="get" resultType="jmp.spring.vo.ContentVo" >
select * from t_contents
<!-- uploadPath || uuid ||'_' || fileName as savePath,
uploadPath ||'s_' || uuid ||'_' || fileName as s_savePath from tbl_attach -->
where cno= #{cno}
</select>

<select id="getBycname" resultType="jmp.spring.vo.ContentVo" >
select * from t_contents

where cname= #{cname}
</select>

<!-- index 화면에서 최신,인기,추천 컨텐츠 가져오기 -->
<select id="getIndexList" resultType="jmp.spring.vo.ContentVo"  >

<choose>
<when test="type=='rec'">

select cno, cname,pfilename,pfilename2,agelimit from t_contents where rec is not null and notshow is null  order by cno desc  
</when>
<when test="type=='genre'">
select rank,cname,pfilename,agelimit,genre from
(
select ROW_NUMBER() over(PARTITION BY genre order by rating) rank,cname,pfilename,agelimit,genre from t_contents where notshow is null 
)
where rank=1
</when>
<otherwise>
select row_num,cno,cname,pfilename,agelimit,notshow from
(
select  ROW_NUMBER() 
<if test="type== 'recent'">
over(order by cno desc) 
</if>
<if test="type== 'popular'">
over(order by rating desc) 
</if>
row_num,cno,cname,pfilename,agelimit,notshow from t_contents 
)where notshow is null and rownum BETWEEN 1 and 5

</otherwise>
</choose>

</select>


<!-- Search 화면에서 입력값을 컨텐츠 이름에서 찾아서 가져오기 -->
<select id="getSearchedCListByCname" resultType="jmp.spring.vo.ContentVo"  >

select cno,cname,pfilename,end from t_contents where cname like '%' ||#{word} ||'%' and notshow is null

</select>
<!-- Search 화면에서 입력값을 cast테이블에서 이름으로 배우 정보 찾아서 가져오기 -->

<!-- Search 화면에서 컨텐츠 정보를 cast 이름에서 찾아서 가져오기 -->
<select id="getCastListByName" resultType="jmp.spring.vo.CastVo"  >

select * from t_cast where castname like '%' ||#{word} ||'%' 

</select>
<select id="getSearchedCListByCast" resultType="jmp.spring.vo.ContentVo">
select c.*
from cast_match m  inner join t_contents c on m.cno=c.cno
inner join t_cast k on  k.castno=m.castno

 where k.castname like '%' ||#{word} ||'%' and notshow is null


</select>

<update id="notRec">
update t_contents set rec =null where cno = #{cno}

</update>
<update id="Rec">
update t_contents set rec =1 where cno = #{cno}

</update>
<update id="notshow">
update t_contents set notshow =1 where cno = #{cno}

</update>
<update id="show">
update t_contents set notshow =null where cno = #{cno}

</update>

<update id="saveMatch">
update user_match set vno =#{vno} where cno =#{cno} and id= #{id}

</update>
<insert id="insertMatch">
insert into user_match (cno,vno,id) values(#{cno},#{vno},#{id} )

</insert>
<select id="getMatch" resultType="jmp.spring.vo.User">
select * from user_match where cno =#{cno} and id =#{id}
</select>



<select id="getVMatchList" resultType="jmp.spring.vo.ContentVo">
select c.cname,c.cno, c.pfilename,v.vfileName,v.vno from

t_contents c inner join user_match m on c.cno = m.cno
inner join t_video v on  v.vno=m.vno
where m.id=#{id}

</select>


</mapper>